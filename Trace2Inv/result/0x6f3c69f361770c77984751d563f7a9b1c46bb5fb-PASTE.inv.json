[
    {
        "func": "approve(spender,value)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(_balances)) > 0)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(_balances)) == 1000000000000000000000000000000000)",
            "VeriSol.Requires(msg.value == 0)",
            "VeriSol.Requires(VeriSol.Old(uint256(_decimals)) == 0)",
            "VeriSol.Requires(msg.sender != address(0))",
            "VeriSol.Requires(VeriSol.Old(_totalSupply) == 0)",
            "VeriSol.Requires(spender != address(0))",
            "VeriSol.Requires(msg.sender != spender)"
        ],
        "postconditions": [
            "VeriSol.Ensures(_decimals == 0)",
            "VeriSol.Ensures(_totalSupply == 0)",
            "VeriSol.Ensures(VeriSol.SumMapping(_balances) > 0)",
            "VeriSol.Ensures(VeriSol.SumMapping(_balances) == 1000000000000000000000000000000000)",
            "VeriSol.Ensures(_decimals == VeriSol.Old(uint256(_decimals)))",
            "VeriSol.Ensures(_decimals >= VeriSol.Old(uint256(_decimals)))",
            "VeriSol.Ensures(_decimals <= VeriSol.Old(uint256(_decimals)))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) == VeriSol.SumMapping(_balances))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) >= VeriSol.SumMapping(_balances))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) <= VeriSol.SumMapping(_balances))",
            "VeriSol.Ensures(_totalSupply == VeriSol.Old(_totalSupply))",
            "VeriSol.Ensures(_totalSupply >= VeriSol.Old(_totalSupply))",
            "VeriSol.Ensures(_totalSupply <= VeriSol.Old(_totalSupply))"
        ],
        "falsified_preconditions": [
            "VeriSol.Requires(value > 0)"
        ],
        "falsified_postconditions": []
    },
    {
        "func": "approve(spender,value)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "transferFrom(sender,recipient,amount)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "transferFrom(sender,recipient,amount)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "increaseAllowance(spender,addedValue)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "increaseAllowance(spender,addedValue)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "burn(value)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "burn(value)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "decreaseAllowance(spender,subtractedValue)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "decreaseAllowance(spender,subtractedValue)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "transfer(recipient,amount)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "transfer(recipient,amount)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": null,
        "type": "PptType.CONTRACT",
        "executionType": "TxType.NORMAL",
        "preconditions": [
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(_balances)) > 0)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(_balances)) == 1000000000000000000000000000000000)",
            "VeriSol.Requires(VeriSol.Old(uint256(_decimals)) == 0)",
            "VeriSol.Requires(VeriSol.Old(_totalSupply) == 0)"
        ],
        "postconditions": [
            "VeriSol.Ensures(_decimals == 0)",
            "VeriSol.Ensures(_totalSupply == 0)",
            "VeriSol.Ensures(VeriSol.SumMapping(_balances) > 0)",
            "VeriSol.Ensures(VeriSol.SumMapping(_balances) == 1000000000000000000000000000000000)",
            "VeriSol.Ensures(_decimals == VeriSol.Old(uint256(_decimals)))",
            "VeriSol.Ensures(_decimals >= VeriSol.Old(uint256(_decimals)))",
            "VeriSol.Ensures(_decimals <= VeriSol.Old(uint256(_decimals)))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) == VeriSol.SumMapping(_balances))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) >= VeriSol.SumMapping(_balances))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(_balances)) <= VeriSol.SumMapping(_balances))",
            "VeriSol.Ensures(_totalSupply == VeriSol.Old(_totalSupply))",
            "VeriSol.Ensures(_totalSupply >= VeriSol.Old(_totalSupply))",
            "VeriSol.Ensures(_totalSupply <= VeriSol.Old(_totalSupply))"
        ],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    }
]