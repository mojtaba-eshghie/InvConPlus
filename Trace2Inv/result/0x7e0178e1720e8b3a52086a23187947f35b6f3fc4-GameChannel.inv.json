[
    {
        "func": "activate()",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [
            "VeriSol.Requires(VeriSol.Old(DOMAIN_SEPERATOR) == '')",
            "VeriSol.Requires(VeriSol.Old(address(houseAddress)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) > 0)",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) == 4031)",
            "VeriSol.Requires(VeriSol.Old(activeGames) == 0)",
            "VeriSol.Requires(VeriSol.Old(paused) == false)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) == 0)",
            "VeriSol.Requires(VeriSol.Old(updateTime) == 0)",
            "VeriSol.Requires(VeriSol.Old(uint256(minStake)) == 0)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(pendingOwner)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(profitTransferTimeSpan) == 0)",
            "VeriSol.Requires(msg.sender != address(0))",
            "VeriSol.Requires(VeriSol.Old(houseStake) == 0)",
            "VeriSol.Requires(msg.value == 0)",
            "VeriSol.Requires(VeriSol.Old(lastProfitTransferTimestamp) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(newConflictRes)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(activated) == false)",
            "VeriSol.Requires(VeriSol.Old(address(serverAddress)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(uint256(maxStake)) == 0)",
            "VeriSol.Requires(VeriSol.Old(houseProfit) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(owner)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(timePaused) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(conflictRes)) == address(0))",
            "VeriSol.Requires(msg.sender != VeriSol.Old(address(owner)))"
        ],
        "postconditions": [
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == 0)",
            "VeriSol.Ensures(lastProfitTransferTimestamp == 0)",
            "VeriSol.Ensures(profitTransferTimeSpan == 0)",
            "VeriSol.Ensures(conflictRes == address(0))",
            "VeriSol.Ensures(updateTime == 0)",
            "VeriSol.Ensures(houseAddress == address(0))",
            "VeriSol.Ensures(timePaused == 0)",
            "VeriSol.Ensures(activated == true)",
            "VeriSol.Ensures(maxStake == 0)",
            "VeriSol.Ensures(gameIdCntr > 0)",
            "VeriSol.Ensures(gameIdCntr == 4031)",
            "VeriSol.Ensures(serverAddress == address(0))",
            "VeriSol.Ensures(VeriSol.SumMapping(userGameId) == 0)",
            "VeriSol.Ensures(paused == true)",
            "VeriSol.Ensures(minStake == 0)",
            "VeriSol.Ensures(activeGames == 0)",
            "VeriSol.Ensures(newConflictRes == address(0))",
            "VeriSol.Ensures(gameIdGame[...].userSeed != '')",
            "VeriSol.Ensures(houseStake == 0)",
            "VeriSol.Ensures(DOMAIN_SEPERATOR=='')",
            "VeriSol.Ensures(pendingOwner == address(0))",
            "VeriSol.Ensures(owner == address(0))",
            "VeriSol.Ensures(houseProfit == 0)",
            "VeriSol.Ensures(gameIdGame[...].serverSeed != '')",
            "VeriSol.Ensures(VeriSol.Old(address(houseAddress)) == houseAddress)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) >= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(lastProfitTransferTimestamp == VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(lastProfitTransferTimestamp >= VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(lastProfitTransferTimestamp <= VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) == gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) >= gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) <= gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) == activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) >= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) <= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(paused) != paused)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) == VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) >= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(profitTransferTimeSpan == VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(profitTransferTimeSpan >= VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(profitTransferTimeSpan <= VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(conflictRes == VeriSol.Old(address(conflictRes)))",
            "VeriSol.Ensures(updateTime == VeriSol.Old(updateTime))",
            "VeriSol.Ensures(updateTime >= VeriSol.Old(updateTime))",
            "VeriSol.Ensures(updateTime <= VeriSol.Old(updateTime))",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) == minStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) >= minStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) <= minStake)",
            "VeriSol.Ensures(timePaused == VeriSol.Old(timePaused))",
            "VeriSol.Ensures(timePaused >= VeriSol.Old(timePaused))",
            "VeriSol.Ensures(timePaused <= VeriSol.Old(timePaused))",
            "VeriSol.Ensures(activated != VeriSol.Old(activated))",
            "VeriSol.Ensures(maxStake == VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(maxStake >= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(maxStake <= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(VeriSol.Old(address(pendingOwner)) == pendingOwner)",
            "VeriSol.Ensures(serverAddress == VeriSol.Old(address(serverAddress)))",
            "VeriSol.Ensures(msg.sender != owner)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) == houseStake)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) >= houseStake)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) <= houseStake)",
            "VeriSol.Ensures(newConflictRes == VeriSol.Old(address(newConflictRes)))",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) == houseProfit)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) >= houseProfit)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) <= houseProfit)",
            "VeriSol.Ensures(owner == VeriSol.Old(address(owner)))"
        ],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "activate()",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setGameIdCntr(_gameIdCntr)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setGameIdCntr(_gameIdCntr)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "withdraw()",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "withdraw()",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "unpause()",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [
            "VeriSol.Requires(VeriSol.Old(DOMAIN_SEPERATOR) == '')",
            "VeriSol.Requires(VeriSol.Old(address(houseAddress)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) > 0)",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) == 4031)",
            "VeriSol.Requires(VeriSol.Old(activeGames) == 0)",
            "VeriSol.Requires(VeriSol.Old(paused) == true)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) == 0)",
            "VeriSol.Requires(VeriSol.Old(updateTime) == 0)",
            "VeriSol.Requires(VeriSol.Old(uint256(minStake)) == 0)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(pendingOwner)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(profitTransferTimeSpan) == 0)",
            "VeriSol.Requires(msg.sender != address(0))",
            "VeriSol.Requires(VeriSol.Old(houseStake) > 0)",
            "VeriSol.Requires(VeriSol.Old(houseStake) == 50000000000000000000)",
            "VeriSol.Requires(msg.value == 0)",
            "VeriSol.Requires(VeriSol.Old(lastProfitTransferTimestamp) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(newConflictRes)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(activated) == true)",
            "VeriSol.Requires(VeriSol.Old(address(serverAddress)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(uint256(maxStake)) == 0)",
            "VeriSol.Requires(VeriSol.Old(houseProfit) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(owner)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(timePaused) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(conflictRes)) == address(0))",
            "VeriSol.Requires(msg.sender != VeriSol.Old(address(owner)))"
        ],
        "postconditions": [
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == 0)",
            "VeriSol.Ensures(lastProfitTransferTimestamp == 0)",
            "VeriSol.Ensures(profitTransferTimeSpan == 0)",
            "VeriSol.Ensures(conflictRes == address(0))",
            "VeriSol.Ensures(updateTime == 0)",
            "VeriSol.Ensures(houseAddress == address(0))",
            "VeriSol.Ensures(timePaused == 0)",
            "VeriSol.Ensures(activated == true)",
            "VeriSol.Ensures(maxStake == 0)",
            "VeriSol.Ensures(gameIdCntr > 0)",
            "VeriSol.Ensures(gameIdCntr == 4031)",
            "VeriSol.Ensures(serverAddress == address(0))",
            "VeriSol.Ensures(VeriSol.SumMapping(userGameId) == 0)",
            "VeriSol.Ensures(paused == false)",
            "VeriSol.Ensures(minStake == 0)",
            "VeriSol.Ensures(activeGames == 0)",
            "VeriSol.Ensures(newConflictRes == address(0))",
            "VeriSol.Ensures(gameIdGame[...].userSeed != '')",
            "VeriSol.Ensures(houseStake > 0)",
            "VeriSol.Ensures(houseStake == 50000000000000000000)",
            "VeriSol.Ensures(DOMAIN_SEPERATOR=='')",
            "VeriSol.Ensures(pendingOwner == address(0))",
            "VeriSol.Ensures(owner == address(0))",
            "VeriSol.Ensures(houseProfit == 0)",
            "VeriSol.Ensures(gameIdGame[...].serverSeed != '')",
            "VeriSol.Ensures(VeriSol.Old(address(houseAddress)) == houseAddress)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) >= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(lastProfitTransferTimestamp == VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(lastProfitTransferTimestamp >= VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(lastProfitTransferTimestamp <= VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) == gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) >= gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) <= gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) == activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) >= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) <= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(paused) != paused)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) == VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) >= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(profitTransferTimeSpan == VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(profitTransferTimeSpan >= VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(profitTransferTimeSpan <= VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(conflictRes == VeriSol.Old(address(conflictRes)))",
            "VeriSol.Ensures(updateTime == VeriSol.Old(updateTime))",
            "VeriSol.Ensures(updateTime >= VeriSol.Old(updateTime))",
            "VeriSol.Ensures(updateTime <= VeriSol.Old(updateTime))",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) == minStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) >= minStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) <= minStake)",
            "VeriSol.Ensures(timePaused == VeriSol.Old(timePaused))",
            "VeriSol.Ensures(timePaused >= VeriSol.Old(timePaused))",
            "VeriSol.Ensures(timePaused <= VeriSol.Old(timePaused))",
            "VeriSol.Ensures(activated == VeriSol.Old(activated))",
            "VeriSol.Ensures(maxStake == VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(maxStake >= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(maxStake <= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(VeriSol.Old(address(pendingOwner)) == pendingOwner)",
            "VeriSol.Ensures(serverAddress == VeriSol.Old(address(serverAddress)))",
            "VeriSol.Ensures(msg.sender != owner)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) == houseStake)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) >= houseStake)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) <= houseStake)",
            "VeriSol.Ensures(newConflictRes == VeriSol.Old(address(newConflictRes)))",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) == houseProfit)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) >= houseProfit)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) <= houseProfit)",
            "VeriSol.Ensures(owner == VeriSol.Old(address(owner)))"
        ],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "unpause()",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "serverEndGame(_roundId,_balance,_serverHash,_userHash,_gameId,_contractAddress,_userAddress,_userSig)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [
            "VeriSol.Requires(VeriSol.Old(DOMAIN_SEPERATOR) == '')",
            "VeriSol.Requires(VeriSol.Old(address(houseAddress)) == address(0))",
            "VeriSol.Requires(_userHash != '')",
            "VeriSol.Requires(_contractAddress != address(0))",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) > 0)",
            "VeriSol.Requires(VeriSol.Old(activeGames) > 0)",
            "VeriSol.Requires(VeriSol.Old(paused) == false)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) > 0)",
            "VeriSol.Requires(VeriSol.Old(userGameId[_userAddress]) > 0)",
            "VeriSol.Requires(VeriSol.Old(updateTime) == 0)",
            "VeriSol.Requires(_userAddress != address(0))",
            "VeriSol.Requires(VeriSol.Old(uint256(minStake)) == 0)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(pendingOwner)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(profitTransferTimeSpan) == 0)",
            "VeriSol.Requires(msg.sender != address(0))",
            "VeriSol.Requires(_gameId > 0)",
            "VeriSol.Requires(VeriSol.Old(houseStake) > 0)",
            "VeriSol.Requires(msg.value == 0)",
            "VeriSol.Requires(VeriSol.Old(lastProfitTransferTimestamp) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(newConflictRes)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(activated) == true)",
            "VeriSol.Requires(VeriSol.Old(address(serverAddress)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(uint256(maxStake)) == 0)",
            "VeriSol.Requires(_userSig != '')",
            "VeriSol.Requires(VeriSol.Old(pendingReturns[_userAddress]) == 0)",
            "VeriSol.Requires(_roundId > 0)",
            "VeriSol.Requires(_serverHash != '')",
            "VeriSol.Requires(VeriSol.Old(address(owner)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(timePaused) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(conflictRes)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(activeGames) >= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Requires(VeriSol.Old(activeGames) > VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Requires(VeriSol.Old(activeGames) != VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Requires(VeriSol.Old(activeGames) <= VeriSol.Old(houseStake))",
            "VeriSol.Requires(VeriSol.Old(activeGames) < VeriSol.Old(houseStake))",
            "VeriSol.Requires(VeriSol.Old(activeGames) != VeriSol.Old(houseStake))",
            "VeriSol.Requires(VeriSol.Old(activeGames) >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(activeGames) > VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(activeGames) != VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(activeGames) != _roundId)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) >= VeriSol.Old(userGameId[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) >= _gameId)",
            "VeriSol.Requires(VeriSol.Old(userGameId[_userAddress]) == _gameId)",
            "VeriSol.Requires(VeriSol.Old(userGameId[_userAddress]) >= _gameId)",
            "VeriSol.Requires(VeriSol.Old(userGameId[_userAddress]) <= _gameId)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) <= VeriSol.Old(houseStake))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) < VeriSol.Old(houseStake))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) != VeriSol.Old(houseStake))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) == VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) <= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) <= _roundId)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) < _roundId)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) != _roundId)",
            "VeriSol.Requires(msg.sender != VeriSol.Old(address(serverAddress)))",
            "VeriSol.Requires(VeriSol.Old(houseStake) >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(houseStake) > VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(houseStake) != VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(houseStake) >= _roundId)",
            "VeriSol.Requires(VeriSol.Old(houseStake) > _roundId)",
            "VeriSol.Requires(VeriSol.Old(houseStake) != _roundId)",
            "VeriSol.Requires(_balance != VeriSol.Old(houseProfit))",
            "VeriSol.Requires(VeriSol.Old(pendingReturns[_userAddress]) <= _roundId)",
            "VeriSol.Requires(VeriSol.Old(pendingReturns[_userAddress]) < _roundId)",
            "VeriSol.Requires(VeriSol.Old(pendingReturns[_userAddress]) != _roundId)"
        ],
        "postconditions": [
            "VeriSol.Ensures(pendingReturns[_userAddress] == 0)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == 0)",
            "VeriSol.Ensures(lastProfitTransferTimestamp == 0)",
            "VeriSol.Ensures(userGameId[_userAddress] > 0)",
            "VeriSol.Ensures(profitTransferTimeSpan == 0)",
            "VeriSol.Ensures(conflictRes == address(0))",
            "VeriSol.Ensures(updateTime == 0)",
            "VeriSol.Ensures(houseAddress == address(0))",
            "VeriSol.Ensures(timePaused == 0)",
            "VeriSol.Ensures(activated == true)",
            "VeriSol.Ensures(maxStake == 0)",
            "VeriSol.Ensures(gameIdCntr > 0)",
            "VeriSol.Ensures(serverAddress == address(0))",
            "VeriSol.Ensures(VeriSol.SumMapping(userGameId) > 0)",
            "VeriSol.Ensures(paused == false)",
            "VeriSol.Ensures(minStake == 0)",
            "VeriSol.Ensures(newConflictRes == address(0))",
            "VeriSol.Ensures(gameIdGame[...].userSeed != '')",
            "VeriSol.Ensures(houseStake > 0)",
            "VeriSol.Ensures(DOMAIN_SEPERATOR=='')",
            "VeriSol.Ensures(pendingOwner == address(0))",
            "VeriSol.Ensures(owner == address(0))",
            "VeriSol.Ensures(houseProfit > 0)",
            "VeriSol.Ensures(gameIdGame[...].serverSeed != '')",
            "VeriSol.Ensures(pendingReturns[_userAddress] == VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(pendingReturns[_userAddress] >= VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= VeriSol.Old(activeGames))",
            "VeriSol.Ensures(pendingReturns[_userAddress] < VeriSol.Old(activeGames))",
            "VeriSol.Ensures(pendingReturns[_userAddress] != VeriSol.Old(activeGames))",
            "VeriSol.Ensures(pendingReturns[_userAddress] == VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(pendingReturns[_userAddress] >= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= VeriSol.Old(houseStake))",
            "VeriSol.Ensures(pendingReturns[_userAddress] < VeriSol.Old(houseStake))",
            "VeriSol.Ensures(pendingReturns[_userAddress] != VeriSol.Old(houseStake))",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= activeGames)",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= houseStake)",
            "VeriSol.Ensures(pendingReturns[_userAddress] < houseStake)",
            "VeriSol.Ensures(pendingReturns[_userAddress] != houseStake)",
            "VeriSol.Ensures(pendingReturns[_userAddress] == VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(pendingReturns[_userAddress] >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= _roundId)",
            "VeriSol.Ensures(pendingReturns[_userAddress] < _roundId)",
            "VeriSol.Ensures(pendingReturns[_userAddress] != _roundId)",
            "VeriSol.Ensures(VeriSol.Old(address(houseAddress)) == houseAddress)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= VeriSol.Old(activeGames))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) < VeriSol.Old(activeGames))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) != VeriSol.Old(activeGames))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) >= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= VeriSol.Old(houseStake))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) < VeriSol.Old(houseStake))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) != VeriSol.Old(houseStake))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= activeGames)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= houseStake)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) < houseStake)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) != houseStake)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= _roundId)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) < _roundId)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) != _roundId)",
            "VeriSol.Ensures(lastProfitTransferTimestamp == VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(lastProfitTransferTimestamp >= VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(lastProfitTransferTimestamp <= VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) == gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) >= gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) <= gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) == activeGames + 1)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) >= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) > activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) != activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) <= houseStake)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) < houseStake)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) != houseStake)",
            "VeriSol.Ensures(userGameId[_userAddress] <= VeriSol.Old(VeriSol.SumMapping(userGameId)))",
            "VeriSol.Ensures(userGameId[_userAddress] == VeriSol.Old(userGameId[_userAddress]))",
            "VeriSol.Ensures(userGameId[_userAddress] >= VeriSol.Old(userGameId[_userAddress]))",
            "VeriSol.Ensures(userGameId[_userAddress] <= VeriSol.Old(userGameId[_userAddress]))",
            "VeriSol.Ensures(userGameId[_userAddress] == _gameId)",
            "VeriSol.Ensures(userGameId[_userAddress] >= _gameId)",
            "VeriSol.Ensures(userGameId[_userAddress] <= _gameId)",
            "VeriSol.Ensures(userGameId[_userAddress] <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(paused) == paused)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) == VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) >= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(profitTransferTimeSpan == VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(profitTransferTimeSpan >= VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(profitTransferTimeSpan <= VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(conflictRes == VeriSol.Old(address(conflictRes)))",
            "VeriSol.Ensures(VeriSol.Old(userGameId[_userAddress]) <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(updateTime == VeriSol.Old(updateTime))",
            "VeriSol.Ensures(updateTime >= VeriSol.Old(updateTime))",
            "VeriSol.Ensures(updateTime <= VeriSol.Old(updateTime))",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) == minStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) >= minStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) <= minStake)",
            "VeriSol.Ensures(timePaused == VeriSol.Old(timePaused))",
            "VeriSol.Ensures(timePaused >= VeriSol.Old(timePaused))",
            "VeriSol.Ensures(timePaused <= VeriSol.Old(timePaused))",
            "VeriSol.Ensures(activated == VeriSol.Old(activated))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) <= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) <= houseStake)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) < houseStake)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) != houseStake)",
            "VeriSol.Ensures(maxStake == VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(maxStake >= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(maxStake <= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(VeriSol.Old(address(pendingOwner)) == pendingOwner)",
            "VeriSol.Ensures(serverAddress != msg.sender)",
            "VeriSol.Ensures(serverAddress == VeriSol.Old(address(serverAddress)))",
            "VeriSol.Ensures(_gameId <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(houseStake) >= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) > activeGames)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) != activeGames)",
            "VeriSol.Ensures(_balance <= houseProfit)",
            "VeriSol.Ensures(_balance < houseProfit)",
            "VeriSol.Ensures(_balance != houseProfit)",
            "VeriSol.Ensures(activeGames <= houseStake)",
            "VeriSol.Ensures(activeGames < houseStake)",
            "VeriSol.Ensures(activeGames != houseStake)",
            "VeriSol.Ensures(activeGames >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(activeGames <= _roundId)",
            "VeriSol.Ensures(newConflictRes == VeriSol.Old(address(newConflictRes)))",
            "VeriSol.Ensures(houseStake >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(houseStake > VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(houseStake != VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(houseStake >= _roundId)",
            "VeriSol.Ensures(houseStake > _roundId)",
            "VeriSol.Ensures(houseStake != _roundId)",
            "VeriSol.Ensures(owner == VeriSol.Old(address(owner)))"
        ],
        "falsified_preconditions": [
            "VeriSol.Requires(_balance > 0)",
            "VeriSol.Requires(VeriSol.Old(houseProfit) > 0)",
            "VeriSol.Requires(VeriSol.Old(activeGames) == VeriSol.Old(VeriSol.SumMapping(pendingReturns)) + 1)",
            "VeriSol.Requires(VeriSol.Old(activeGames) == VeriSol.Old(pendingReturns[_userAddress]) + 1)",
            "VeriSol.Requires(VeriSol.Old(activeGames) <= _roundId)",
            "VeriSol.Requires(VeriSol.Old(activeGames) < _roundId)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) > VeriSol.Old(userGameId[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) != VeriSol.Old(userGameId[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) > _gameId)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) != _gameId)",
            "VeriSol.Requires(_balance <= VeriSol.Old(houseProfit))",
            "VeriSol.Requires(_balance < VeriSol.Old(houseProfit))"
        ],
        "falsified_postconditions": [
            "VeriSol.Ensures(activeGames == 0)",
            "VeriSol.Ensures(activeGames > 0)",
            "VeriSol.Ensures(pendingReturns[_userAddress] == VeriSol.Old(activeGames) - 1)",
            "VeriSol.Ensures(pendingReturns[_userAddress] == activeGames - 1)",
            "VeriSol.Ensures(pendingReturns[_userAddress] == activeGames)",
            "VeriSol.Ensures(pendingReturns[_userAddress] >= activeGames)",
            "VeriSol.Ensures(pendingReturns[_userAddress] < activeGames)",
            "VeriSol.Ensures(pendingReturns[_userAddress] != activeGames)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == VeriSol.Old(activeGames) - 1)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == activeGames - 1)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == activeGames)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) >= activeGames)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) < activeGames)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) != activeGames)",
            "VeriSol.Ensures(userGameId[_userAddress] < VeriSol.Old(VeriSol.SumMapping(userGameId)))",
            "VeriSol.Ensures(userGameId[_userAddress] != VeriSol.Old(VeriSol.SumMapping(userGameId)))",
            "VeriSol.Ensures(userGameId[_userAddress] < VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(userGameId[_userAddress] != VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(userGameId[_userAddress]) < VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(userGameId[_userAddress]) != VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) == activeGames - 1)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) == activeGames)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) >= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) < activeGames)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) != activeGames)",
            "VeriSol.Ensures(_gameId < VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(_gameId != VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(houseStake) >= houseStake)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) > houseStake)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) <= houseStake)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) < houseStake)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) != houseStake)",
            "VeriSol.Ensures(activeGames == VeriSol.Old(pendingReturns[_userAddress]) + 1)",
            "VeriSol.Ensures(activeGames == VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(activeGames > VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(activeGames <= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(activeGames != VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(activeGames < _roundId)",
            "VeriSol.Ensures(activeGames != _roundId)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) >= houseProfit)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) > houseProfit)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) <= houseProfit)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) < houseProfit)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) != houseProfit)"
        ]
    },
    {
        "func": "serverEndGame(_roundId,_balance,_serverHash,_userHash,_gameId,_contractAddress,_userAddress,_userSig)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "claimOwnership()",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "claimOwnership()",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "addHouseStake()",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [
            "VeriSol.Requires(VeriSol.Old(DOMAIN_SEPERATOR) == '')",
            "VeriSol.Requires(VeriSol.Old(address(houseAddress)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) > 0)",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) == 4031)",
            "VeriSol.Requires(VeriSol.Old(activeGames) == 0)",
            "VeriSol.Requires(VeriSol.Old(paused) == true)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) == 0)",
            "VeriSol.Requires(VeriSol.Old(updateTime) == 0)",
            "VeriSol.Requires(VeriSol.Old(uint256(minStake)) == 0)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(pendingOwner)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(profitTransferTimeSpan) == 0)",
            "VeriSol.Requires(msg.sender != address(0))",
            "VeriSol.Requires(msg.value > 0)",
            "VeriSol.Requires(VeriSol.Old(lastProfitTransferTimestamp) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(newConflictRes)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(activated) == true)",
            "VeriSol.Requires(VeriSol.Old(address(serverAddress)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(uint256(maxStake)) == 0)",
            "VeriSol.Requires(VeriSol.Old(houseProfit) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(owner)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(timePaused) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(conflictRes)) == address(0))",
            "VeriSol.Requires(msg.sender != VeriSol.Old(address(owner)))"
        ],
        "postconditions": [
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == 0)",
            "VeriSol.Ensures(lastProfitTransferTimestamp == 0)",
            "VeriSol.Ensures(profitTransferTimeSpan == 0)",
            "VeriSol.Ensures(conflictRes == address(0))",
            "VeriSol.Ensures(updateTime == 0)",
            "VeriSol.Ensures(houseAddress == address(0))",
            "VeriSol.Ensures(timePaused == 0)",
            "VeriSol.Ensures(activated == true)",
            "VeriSol.Ensures(maxStake == 0)",
            "VeriSol.Ensures(gameIdCntr > 0)",
            "VeriSol.Ensures(gameIdCntr == 4031)",
            "VeriSol.Ensures(serverAddress == address(0))",
            "VeriSol.Ensures(VeriSol.SumMapping(userGameId) == 0)",
            "VeriSol.Ensures(paused == true)",
            "VeriSol.Ensures(minStake == 0)",
            "VeriSol.Ensures(activeGames == 0)",
            "VeriSol.Ensures(newConflictRes == address(0))",
            "VeriSol.Ensures(gameIdGame[...].userSeed != '')",
            "VeriSol.Ensures(houseStake > 0)",
            "VeriSol.Ensures(DOMAIN_SEPERATOR=='')",
            "VeriSol.Ensures(pendingOwner == address(0))",
            "VeriSol.Ensures(owner == address(0))",
            "VeriSol.Ensures(houseProfit == 0)",
            "VeriSol.Ensures(gameIdGame[...].serverSeed != '')",
            "VeriSol.Ensures(VeriSol.Old(address(houseAddress)) == houseAddress)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) >= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(lastProfitTransferTimestamp == VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(lastProfitTransferTimestamp >= VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(lastProfitTransferTimestamp <= VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) == gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) >= gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) <= gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) == activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) >= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) <= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(paused) == paused)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) == VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) >= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(profitTransferTimeSpan == VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(profitTransferTimeSpan >= VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(profitTransferTimeSpan <= VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(conflictRes == VeriSol.Old(address(conflictRes)))",
            "VeriSol.Ensures(updateTime == VeriSol.Old(updateTime))",
            "VeriSol.Ensures(updateTime >= VeriSol.Old(updateTime))",
            "VeriSol.Ensures(updateTime <= VeriSol.Old(updateTime))",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) == minStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) >= minStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) <= minStake)",
            "VeriSol.Ensures(timePaused == VeriSol.Old(timePaused))",
            "VeriSol.Ensures(timePaused >= VeriSol.Old(timePaused))",
            "VeriSol.Ensures(timePaused <= VeriSol.Old(timePaused))",
            "VeriSol.Ensures(activated == VeriSol.Old(activated))",
            "VeriSol.Ensures(maxStake == VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(maxStake >= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(maxStake <= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(VeriSol.Old(address(pendingOwner)) == pendingOwner)",
            "VeriSol.Ensures(serverAddress == VeriSol.Old(address(serverAddress)))",
            "VeriSol.Ensures(msg.sender != owner)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) <= houseStake)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) < houseStake)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) != houseStake)",
            "VeriSol.Ensures(newConflictRes == VeriSol.Old(address(newConflictRes)))",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) == houseProfit)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) >= houseProfit)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) <= houseProfit)",
            "VeriSol.Ensures(owner == VeriSol.Old(address(owner)))"
        ],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "addHouseStake()",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "withdrawHouseStake(value)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "withdrawHouseStake(value)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "destroy()",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "destroy()",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "pause()",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "pause()",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "withdrawAll()",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "withdrawAll()",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "userEndGameConflict(_roundId,_gameType,_num,_value,_balance,_serverHash,_userHash,_gameId,_contractAddress,_serverSig,_userSeed)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "userEndGameConflict(_roundId,_gameType,_num,_value,_balance,_serverHash,_userHash,_gameId,_contractAddress,_serverSig,_userSeed)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "serverEndGameConflict(_roundId,_gameType,_num,_value,_balance,_serverHash,_userHash,_gameId,_contractAddress,_userSig,_userAddress,_serverSeed,_userSeed)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [
            "VeriSol.Requires(VeriSol.Old(activeGames) > 0)",
            "VeriSol.Requires(VeriSol.Old(activeGames) == 3)",
            "VeriSol.Requires(VeriSol.Old(paused) == false)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) > 0)",
            "VeriSol.Requires(VeriSol.Old(userGameId[_userAddress]) > 0)",
            "VeriSol.Requires(VeriSol.Old(houseStake) > 0)",
            "VeriSol.Requires(VeriSol.Old(address(newConflictRes)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(activated) == true)",
            "VeriSol.Requires(VeriSol.Old(address(houseAddress)) == address(0))",
            "VeriSol.Requires(_contractAddress != address(0))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(pendingOwner)) == address(0))",
            "VeriSol.Requires(msg.sender != address(0))",
            "VeriSol.Requires(_gameId > 0)",
            "VeriSol.Requires(_userSeed != '')",
            "VeriSol.Requires(_roundId > 0)",
            "VeriSol.Requires(VeriSol.Old(address(owner)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(address(conflictRes)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(DOMAIN_SEPERATOR) == '')",
            "VeriSol.Requires(_userHash != '')",
            "VeriSol.Requires(VeriSol.Old(updateTime) == 0)",
            "VeriSol.Requires(_userAddress != address(0))",
            "VeriSol.Requires(_value > 0)",
            "VeriSol.Requires(msg.value == 0)",
            "VeriSol.Requires(VeriSol.Old(address(serverAddress)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(uint256(maxStake)) == 0)",
            "VeriSol.Requires(VeriSol.Old(timePaused) == 0)",
            "VeriSol.Requires(VeriSol.Old(uint256(minStake)) == 0)",
            "VeriSol.Requires(VeriSol.Old(profitTransferTimeSpan) == 0)",
            "VeriSol.Requires(VeriSol.Old(lastProfitTransferTimestamp) == 0)",
            "VeriSol.Requires(_serverSeed != '')",
            "VeriSol.Requires(_userSig != '')",
            "VeriSol.Requires(_gameType > 0)",
            "VeriSol.Requires(VeriSol.Old(pendingReturns[_userAddress]) == 0)",
            "VeriSol.Requires(VeriSol.Old(houseProfit) > 0)",
            "VeriSol.Requires(_serverHash != '')",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) > 0)",
            "VeriSol.Requires(VeriSol.Old(activeGames) <= VeriSol.Old(houseStake))",
            "VeriSol.Requires(VeriSol.Old(activeGames) < VeriSol.Old(houseStake))",
            "VeriSol.Requires(VeriSol.Old(activeGames) != VeriSol.Old(houseStake))",
            "VeriSol.Requires(VeriSol.Old(activeGames) >= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Requires(VeriSol.Old(activeGames) > VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Requires(VeriSol.Old(activeGames) != VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Requires(VeriSol.Old(activeGames) >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(activeGames) > VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(activeGames) != VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) >= VeriSol.Old(userGameId[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) > VeriSol.Old(userGameId[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) != VeriSol.Old(userGameId[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) >= _gameId)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) > _gameId)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) != _gameId)",
            "VeriSol.Requires(VeriSol.Old(userGameId[_userAddress]) == _gameId)",
            "VeriSol.Requires(VeriSol.Old(userGameId[_userAddress]) >= _gameId)",
            "VeriSol.Requires(VeriSol.Old(userGameId[_userAddress]) <= _gameId)",
            "VeriSol.Requires(VeriSol.Old(houseStake) >= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Requires(VeriSol.Old(houseStake) > VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Requires(VeriSol.Old(houseStake) != VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Requires(VeriSol.Old(houseStake) >= _roundId)",
            "VeriSol.Requires(VeriSol.Old(houseStake) > _roundId)",
            "VeriSol.Requires(VeriSol.Old(houseStake) != _roundId)",
            "VeriSol.Requires(VeriSol.Old(houseStake) >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(houseStake) > VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(houseStake) != VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) <= _roundId)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) < _roundId)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) != _roundId)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) == VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) <= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(msg.sender != VeriSol.Old(address(serverAddress)))",
            "VeriSol.Requires(_roundId >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(_roundId > VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(_roundId != VeriSol.Old(pendingReturns[_userAddress]))"
        ],
        "postconditions": [
            "VeriSol.Ensures(pendingReturns[_userAddress] == 0)",
            "VeriSol.Ensures(conflictRes == address(0))",
            "VeriSol.Ensures(updateTime == 0)",
            "VeriSol.Ensures(houseAddress == address(0))",
            "VeriSol.Ensures(timePaused == 0)",
            "VeriSol.Ensures(activated == true)",
            "VeriSol.Ensures(maxStake == 0)",
            "VeriSol.Ensures(newConflictRes == address(0))",
            "VeriSol.Ensures(houseStake > 0)",
            "VeriSol.Ensures(pendingOwner == address(0))",
            "VeriSol.Ensures(owner == address(0))",
            "VeriSol.Ensures(gameIdCntr > 0)",
            "VeriSol.Ensures(gameIdGame[...].userSeed != '')",
            "VeriSol.Ensures(DOMAIN_SEPERATOR=='')",
            "VeriSol.Ensures(lastProfitTransferTimestamp == 0)",
            "VeriSol.Ensures(userGameId[_userAddress] > 0)",
            "VeriSol.Ensures(profitTransferTimeSpan == 0)",
            "VeriSol.Ensures(serverAddress == address(0))",
            "VeriSol.Ensures(paused == false)",
            "VeriSol.Ensures(activeGames > 0)",
            "VeriSol.Ensures(activeGames == 3)",
            "VeriSol.Ensures(gameIdGame[...].serverSeed != '')",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == 0)",
            "VeriSol.Ensures(VeriSol.SumMapping(userGameId) > 0)",
            "VeriSol.Ensures(minStake == 0)",
            "VeriSol.Ensures(houseProfit > 0)",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= VeriSol.Old(activeGames))",
            "VeriSol.Ensures(pendingReturns[_userAddress] < VeriSol.Old(activeGames))",
            "VeriSol.Ensures(pendingReturns[_userAddress] != VeriSol.Old(activeGames))",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= VeriSol.Old(houseStake))",
            "VeriSol.Ensures(pendingReturns[_userAddress] < VeriSol.Old(houseStake))",
            "VeriSol.Ensures(pendingReturns[_userAddress] != VeriSol.Old(houseStake))",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= houseStake)",
            "VeriSol.Ensures(pendingReturns[_userAddress] < houseStake)",
            "VeriSol.Ensures(pendingReturns[_userAddress] != houseStake)",
            "VeriSol.Ensures(pendingReturns[_userAddress] == VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(pendingReturns[_userAddress] >= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= _roundId)",
            "VeriSol.Ensures(pendingReturns[_userAddress] < _roundId)",
            "VeriSol.Ensures(pendingReturns[_userAddress] != _roundId)",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= activeGames)",
            "VeriSol.Ensures(pendingReturns[_userAddress] < activeGames)",
            "VeriSol.Ensures(pendingReturns[_userAddress] != activeGames)",
            "VeriSol.Ensures(pendingReturns[_userAddress] == VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(pendingReturns[_userAddress] >= VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(pendingReturns[_userAddress] == VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(pendingReturns[_userAddress] >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(VeriSol.Old(activeGames) <= houseStake)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) < houseStake)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) != houseStake)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) == activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) >= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) <= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) >= VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(VeriSol.Old(activeGames) > VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(VeriSol.Old(activeGames) != VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(VeriSol.Old(paused) == paused)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) >= userGameId[_userAddress])",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) > userGameId[_userAddress])",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) != userGameId[_userAddress])",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) == VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) >= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(conflictRes == VeriSol.Old(address(conflictRes)))",
            "VeriSol.Ensures(VeriSol.Old(userGameId[_userAddress]) == userGameId[_userAddress])",
            "VeriSol.Ensures(VeriSol.Old(userGameId[_userAddress]) >= userGameId[_userAddress])",
            "VeriSol.Ensures(VeriSol.Old(userGameId[_userAddress]) <= userGameId[_userAddress])",
            "VeriSol.Ensures(VeriSol.Old(userGameId[_userAddress]) <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(userGameId[_userAddress]) < VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(userGameId[_userAddress]) != VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(updateTime == VeriSol.Old(updateTime))",
            "VeriSol.Ensures(updateTime >= VeriSol.Old(updateTime))",
            "VeriSol.Ensures(updateTime <= VeriSol.Old(updateTime))",
            "VeriSol.Ensures(houseAddress == VeriSol.Old(address(houseAddress)))",
            "VeriSol.Ensures(timePaused == VeriSol.Old(timePaused))",
            "VeriSol.Ensures(timePaused >= VeriSol.Old(timePaused))",
            "VeriSol.Ensures(timePaused <= VeriSol.Old(timePaused))",
            "VeriSol.Ensures(activated == VeriSol.Old(activated))",
            "VeriSol.Ensures(maxStake == VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(maxStake >= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(maxStake <= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(VeriSol.Old(houseStake) == houseStake)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) >= houseStake)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) <= houseStake)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) >= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) > activeGames)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) != activeGames)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) >= VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(VeriSol.Old(houseStake) > VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(VeriSol.Old(houseStake) != VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(VeriSol.Old(address(newConflictRes)) == newConflictRes)",
            "VeriSol.Ensures(houseStake >= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(houseStake > VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(houseStake != VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(houseStake >= _roundId)",
            "VeriSol.Ensures(houseStake > _roundId)",
            "VeriSol.Ensures(houseStake != _roundId)",
            "VeriSol.Ensures(houseStake >= activeGames)",
            "VeriSol.Ensures(houseStake > activeGames)",
            "VeriSol.Ensures(houseStake != activeGames)",
            "VeriSol.Ensures(houseStake >= VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(houseStake > VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(houseStake != VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(houseStake >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(houseStake > VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(houseStake != VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(pendingOwner == VeriSol.Old(address(pendingOwner)))",
            "VeriSol.Ensures(owner == VeriSol.Old(address(owner)))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) <= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) < activeGames)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) != activeGames)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) == VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) >= VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) <= VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(gameIdCntr == VeriSol.Old(gameIdCntr))",
            "VeriSol.Ensures(gameIdCntr >= VeriSol.Old(gameIdCntr))",
            "VeriSol.Ensures(gameIdCntr <= VeriSol.Old(gameIdCntr))",
            "VeriSol.Ensures(msg.sender != serverAddress)",
            "VeriSol.Ensures(_gameId == userGameId[_userAddress])",
            "VeriSol.Ensures(_gameId >= userGameId[_userAddress])",
            "VeriSol.Ensures(_gameId <= userGameId[_userAddress])",
            "VeriSol.Ensures(_gameId <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(_gameId < VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(_gameId != VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(_roundId >= VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(_roundId > VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(_roundId != VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(lastProfitTransferTimestamp == VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(lastProfitTransferTimestamp >= VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(lastProfitTransferTimestamp <= VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(userGameId[_userAddress] <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(userGameId[_userAddress] < VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(userGameId[_userAddress] != VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(profitTransferTimeSpan == VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(profitTransferTimeSpan >= VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(profitTransferTimeSpan <= VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(serverAddress == VeriSol.Old(address(serverAddress)))",
            "VeriSol.Ensures(activeGames >= VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(activeGames > VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(activeGames != VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(activeGames >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(activeGames > VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(activeGames != VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) == minStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) >= minStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) <= minStake)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) == houseProfit)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) >= houseProfit)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) <= houseProfit)"
        ],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "serverEndGameConflict(_roundId,_gameType,_num,_value,_balance,_serverHash,_userHash,_gameId,_contractAddress,_userSig,_userAddress,_serverSeed,_userSeed)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "userCancelActiveGame(_gameId)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "userCancelActiveGame(_gameId)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setProfitTransferTimeSpan(_profitTransferTimeSpan)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setProfitTransferTimeSpan(_profitTransferTimeSpan)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "activateConflictResolution()",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "activateConflictResolution()",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "serverCancelActiveGame(_userAddress,_gameId)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [
            "VeriSol.Requires(VeriSol.Old(DOMAIN_SEPERATOR) == '')",
            "VeriSol.Requires(VeriSol.Old(address(houseAddress)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) > 0)",
            "VeriSol.Requires(VeriSol.Old(activeGames) > 0)",
            "VeriSol.Requires(VeriSol.Old(paused) == false)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) > 0)",
            "VeriSol.Requires(VeriSol.Old(userGameId[_userAddress]) > 0)",
            "VeriSol.Requires(VeriSol.Old(updateTime) == 0)",
            "VeriSol.Requires(_userAddress != address(0))",
            "VeriSol.Requires(VeriSol.Old(uint256(minStake)) == 0)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(pendingOwner)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(profitTransferTimeSpan) == 0)",
            "VeriSol.Requires(msg.sender != address(0))",
            "VeriSol.Requires(_gameId > 0)",
            "VeriSol.Requires(VeriSol.Old(houseStake) > 0)",
            "VeriSol.Requires(msg.value == 0)",
            "VeriSol.Requires(VeriSol.Old(lastProfitTransferTimestamp) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(newConflictRes)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(activated) == true)",
            "VeriSol.Requires(VeriSol.Old(address(serverAddress)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(uint256(maxStake)) == 0)",
            "VeriSol.Requires(VeriSol.Old(pendingReturns[_userAddress]) == 0)",
            "VeriSol.Requires(VeriSol.Old(houseProfit) > 0)",
            "VeriSol.Requires(VeriSol.Old(address(owner)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(timePaused) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(conflictRes)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(activeGames) >= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Requires(VeriSol.Old(activeGames) > VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Requires(VeriSol.Old(activeGames) != VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Requires(VeriSol.Old(activeGames) <= VeriSol.Old(houseStake))",
            "VeriSol.Requires(VeriSol.Old(activeGames) < VeriSol.Old(houseStake))",
            "VeriSol.Requires(VeriSol.Old(activeGames) != VeriSol.Old(houseStake))",
            "VeriSol.Requires(VeriSol.Old(activeGames) >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(activeGames) > VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(activeGames) != VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) >= VeriSol.Old(userGameId[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) > VeriSol.Old(userGameId[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) != VeriSol.Old(userGameId[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) >= _gameId)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) > _gameId)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) != _gameId)",
            "VeriSol.Requires(VeriSol.Old(userGameId[_userAddress]) == _gameId)",
            "VeriSol.Requires(VeriSol.Old(userGameId[_userAddress]) >= _gameId)",
            "VeriSol.Requires(VeriSol.Old(userGameId[_userAddress]) <= _gameId)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) <= VeriSol.Old(houseStake))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) < VeriSol.Old(houseStake))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) != VeriSol.Old(houseStake))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) == VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) <= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(msg.sender != VeriSol.Old(address(serverAddress)))",
            "VeriSol.Requires(VeriSol.Old(houseStake) >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(houseStake) > VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(houseStake) != VeriSol.Old(pendingReturns[_userAddress]))"
        ],
        "postconditions": [
            "VeriSol.Ensures(pendingReturns[_userAddress] == 0)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == 0)",
            "VeriSol.Ensures(lastProfitTransferTimestamp == 0)",
            "VeriSol.Ensures(userGameId[_userAddress] > 0)",
            "VeriSol.Ensures(profitTransferTimeSpan == 0)",
            "VeriSol.Ensures(conflictRes == address(0))",
            "VeriSol.Ensures(updateTime == 0)",
            "VeriSol.Ensures(houseAddress == address(0))",
            "VeriSol.Ensures(timePaused == 0)",
            "VeriSol.Ensures(activated == true)",
            "VeriSol.Ensures(maxStake == 0)",
            "VeriSol.Ensures(gameIdCntr > 0)",
            "VeriSol.Ensures(serverAddress == address(0))",
            "VeriSol.Ensures(VeriSol.SumMapping(userGameId) > 0)",
            "VeriSol.Ensures(paused == false)",
            "VeriSol.Ensures(minStake == 0)",
            "VeriSol.Ensures(activeGames > 0)",
            "VeriSol.Ensures(newConflictRes == address(0))",
            "VeriSol.Ensures(gameIdGame[...].userSeed != '')",
            "VeriSol.Ensures(houseStake > 0)",
            "VeriSol.Ensures(DOMAIN_SEPERATOR=='')",
            "VeriSol.Ensures(pendingOwner == address(0))",
            "VeriSol.Ensures(owner == address(0))",
            "VeriSol.Ensures(houseProfit > 0)",
            "VeriSol.Ensures(gameIdGame[...].serverSeed != '')",
            "VeriSol.Ensures(pendingReturns[_userAddress] == VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(pendingReturns[_userAddress] >= VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= VeriSol.Old(activeGames))",
            "VeriSol.Ensures(pendingReturns[_userAddress] < VeriSol.Old(activeGames))",
            "VeriSol.Ensures(pendingReturns[_userAddress] != VeriSol.Old(activeGames))",
            "VeriSol.Ensures(pendingReturns[_userAddress] == VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(pendingReturns[_userAddress] >= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= VeriSol.Old(houseStake))",
            "VeriSol.Ensures(pendingReturns[_userAddress] < VeriSol.Old(houseStake))",
            "VeriSol.Ensures(pendingReturns[_userAddress] != VeriSol.Old(houseStake))",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= activeGames)",
            "VeriSol.Ensures(pendingReturns[_userAddress] < activeGames)",
            "VeriSol.Ensures(pendingReturns[_userAddress] != activeGames)",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= houseStake)",
            "VeriSol.Ensures(pendingReturns[_userAddress] < houseStake)",
            "VeriSol.Ensures(pendingReturns[_userAddress] != houseStake)",
            "VeriSol.Ensures(pendingReturns[_userAddress] == VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(pendingReturns[_userAddress] >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(VeriSol.Old(address(houseAddress)) == houseAddress)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= VeriSol.Old(activeGames))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) < VeriSol.Old(activeGames))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) != VeriSol.Old(activeGames))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) >= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= VeriSol.Old(houseStake))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) < VeriSol.Old(houseStake))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) != VeriSol.Old(houseStake))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= activeGames)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) < activeGames)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) != activeGames)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= houseStake)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) < houseStake)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) != houseStake)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(lastProfitTransferTimestamp == VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(lastProfitTransferTimestamp >= VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(lastProfitTransferTimestamp <= VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) == gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) >= gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) <= gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) == activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) >= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) <= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) <= houseStake)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) < houseStake)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) != houseStake)",
            "VeriSol.Ensures(userGameId[_userAddress] <= VeriSol.Old(VeriSol.SumMapping(userGameId)))",
            "VeriSol.Ensures(userGameId[_userAddress] < VeriSol.Old(VeriSol.SumMapping(userGameId)))",
            "VeriSol.Ensures(userGameId[_userAddress] != VeriSol.Old(VeriSol.SumMapping(userGameId)))",
            "VeriSol.Ensures(userGameId[_userAddress] == VeriSol.Old(userGameId[_userAddress]))",
            "VeriSol.Ensures(userGameId[_userAddress] >= VeriSol.Old(userGameId[_userAddress]))",
            "VeriSol.Ensures(userGameId[_userAddress] <= VeriSol.Old(userGameId[_userAddress]))",
            "VeriSol.Ensures(userGameId[_userAddress] == _gameId)",
            "VeriSol.Ensures(userGameId[_userAddress] >= _gameId)",
            "VeriSol.Ensures(userGameId[_userAddress] <= _gameId)",
            "VeriSol.Ensures(userGameId[_userAddress] <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(userGameId[_userAddress] < VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(userGameId[_userAddress] != VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(paused) == paused)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) == VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) >= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(profitTransferTimeSpan == VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(profitTransferTimeSpan >= VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(profitTransferTimeSpan <= VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(conflictRes == VeriSol.Old(address(conflictRes)))",
            "VeriSol.Ensures(VeriSol.Old(userGameId[_userAddress]) <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(userGameId[_userAddress]) < VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(userGameId[_userAddress]) != VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(updateTime == VeriSol.Old(updateTime))",
            "VeriSol.Ensures(updateTime >= VeriSol.Old(updateTime))",
            "VeriSol.Ensures(updateTime <= VeriSol.Old(updateTime))",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) == minStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) >= minStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) <= minStake)",
            "VeriSol.Ensures(timePaused == VeriSol.Old(timePaused))",
            "VeriSol.Ensures(timePaused >= VeriSol.Old(timePaused))",
            "VeriSol.Ensures(timePaused <= VeriSol.Old(timePaused))",
            "VeriSol.Ensures(activated == VeriSol.Old(activated))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) <= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) < activeGames)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) != activeGames)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) <= houseStake)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) < houseStake)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) != houseStake)",
            "VeriSol.Ensures(maxStake == VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(maxStake >= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(maxStake <= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(VeriSol.Old(address(pendingOwner)) == pendingOwner)",
            "VeriSol.Ensures(serverAddress != msg.sender)",
            "VeriSol.Ensures(serverAddress == VeriSol.Old(address(serverAddress)))",
            "VeriSol.Ensures(_gameId <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(_gameId < VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(_gameId != VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(houseStake) >= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) > activeGames)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) != activeGames)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) == houseStake)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) >= houseStake)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) <= houseStake)",
            "VeriSol.Ensures(activeGames <= houseStake)",
            "VeriSol.Ensures(activeGames < houseStake)",
            "VeriSol.Ensures(activeGames != houseStake)",
            "VeriSol.Ensures(activeGames >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(activeGames > VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(activeGames != VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(newConflictRes == VeriSol.Old(address(newConflictRes)))",
            "VeriSol.Ensures(houseStake >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(houseStake > VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(houseStake != VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) == houseProfit)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) >= houseProfit)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) <= houseProfit)",
            "VeriSol.Ensures(owner == VeriSol.Old(address(owner)))"
        ],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "serverCancelActiveGame(_userAddress,_gameId)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "createGame(_userEndHash,_previousGameId,_createBefore,_serverEndHash,_serverSig)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [
            "VeriSol.Requires(VeriSol.Old(DOMAIN_SEPERATOR) == '')",
            "VeriSol.Requires(VeriSol.Old(address(houseAddress)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) > 0)",
            "VeriSol.Requires(VeriSol.Old(paused) == false)",
            "VeriSol.Requires(_serverSig != '')",
            "VeriSol.Requires(VeriSol.Old(updateTime) == 0)",
            "VeriSol.Requires(_serverEndHash != '')",
            "VeriSol.Requires(VeriSol.Old(uint256(minStake)) == 0)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(pendingOwner)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(profitTransferTimeSpan) == 0)",
            "VeriSol.Requires(msg.sender != address(0))",
            "VeriSol.Requires(VeriSol.Old(houseStake) > 0)",
            "VeriSol.Requires(msg.value > 0)",
            "VeriSol.Requires(VeriSol.Old(lastProfitTransferTimestamp) == 0)",
            "VeriSol.Requires(_userEndHash != '')",
            "VeriSol.Requires(VeriSol.Old(activated) == true)",
            "VeriSol.Requires(VeriSol.Old(address(newConflictRes)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(address(serverAddress)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(uint256(maxStake)) == 0)",
            "VeriSol.Requires(_createBefore > 0)",
            "VeriSol.Requires(VeriSol.Old(address(owner)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(timePaused) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(conflictRes)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) != VeriSol.Old(VeriSol.SumMapping(userGameId)))",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) >= _previousGameId)",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) > _previousGameId)",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) != _previousGameId)",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) >= VeriSol.Old(userGameId[msg.sender]))",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) > VeriSol.Old(userGameId[msg.sender]))",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) != VeriSol.Old(userGameId[msg.sender]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) >= _previousGameId)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) >= VeriSol.Old(userGameId[msg.sender]))",
            "VeriSol.Requires(_previousGameId == VeriSol.Old(userGameId[msg.sender]))",
            "VeriSol.Requires(_previousGameId >= VeriSol.Old(userGameId[msg.sender]))",
            "VeriSol.Requires(_previousGameId <= VeriSol.Old(userGameId[msg.sender]))",
            "VeriSol.Requires(VeriSol.Old(uint256(minStake)) <= msg.value)",
            "VeriSol.Requires(VeriSol.Old(uint256(minStake)) < msg.value)",
            "VeriSol.Requires(VeriSol.Old(uint256(minStake)) != msg.value)",
            "VeriSol.Requires(VeriSol.Old(uint256(minStake)) == VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Requires(VeriSol.Old(uint256(minStake)) >= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Requires(VeriSol.Old(uint256(minStake)) <= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Requires(msg.value >= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Requires(msg.value > VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Requires(msg.value != VeriSol.Old(uint256(maxStake)))"
        ],
        "postconditions": [
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == 0)",
            "VeriSol.Ensures(lastProfitTransferTimestamp == 0)",
            "VeriSol.Ensures(profitTransferTimeSpan == 0)",
            "VeriSol.Ensures(conflictRes == address(0))",
            "VeriSol.Ensures(updateTime == 0)",
            "VeriSol.Ensures(houseAddress == address(0))",
            "VeriSol.Ensures(timePaused == 0)",
            "VeriSol.Ensures(activated == true)",
            "VeriSol.Ensures(maxStake == 0)",
            "VeriSol.Ensures(gameIdCntr > 0)",
            "VeriSol.Ensures(serverAddress == address(0))",
            "VeriSol.Ensures(VeriSol.SumMapping(userGameId) > 0)",
            "VeriSol.Ensures(paused == false)",
            "VeriSol.Ensures(minStake == 0)",
            "VeriSol.Ensures(activeGames > 0)",
            "VeriSol.Ensures(newConflictRes == address(0))",
            "VeriSol.Ensures(userGameId[msg.sender] > 0)",
            "VeriSol.Ensures(gameIdGame[...].userSeed != '')",
            "VeriSol.Ensures(houseStake > 0)",
            "VeriSol.Ensures(DOMAIN_SEPERATOR=='')",
            "VeriSol.Ensures(pendingOwner == address(0))",
            "VeriSol.Ensures(owner == address(0))",
            "VeriSol.Ensures(gameIdGame[...].serverSeed != '')",
            "VeriSol.Ensures(VeriSol.Old(address(houseAddress)) == houseAddress)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) >= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(lastProfitTransferTimestamp == VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(lastProfitTransferTimestamp >= VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(lastProfitTransferTimestamp <= VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) == gameIdCntr - 1)",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) <= gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) < gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) != gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) == userGameId[msg.sender])",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) >= userGameId[msg.sender])",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) <= userGameId[msg.sender])",
            "VeriSol.Ensures(VeriSol.Old(activeGames) == activeGames - 1)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) <= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) < activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) != activeGames)",
            "VeriSol.Ensures(VeriSol.Old(paused) == paused)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) != gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) < VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) != VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) != userGameId[msg.sender])",
            "VeriSol.Ensures(profitTransferTimeSpan == VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(profitTransferTimeSpan >= VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(profitTransferTimeSpan <= VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(conflictRes == VeriSol.Old(address(conflictRes)))",
            "VeriSol.Ensures(updateTime == VeriSol.Old(updateTime))",
            "VeriSol.Ensures(updateTime >= VeriSol.Old(updateTime))",
            "VeriSol.Ensures(updateTime <= VeriSol.Old(updateTime))",
            "VeriSol.Ensures(_previousGameId <= gameIdCntr)",
            "VeriSol.Ensures(_previousGameId < gameIdCntr)",
            "VeriSol.Ensures(_previousGameId != gameIdCntr)",
            "VeriSol.Ensures(_previousGameId <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(_previousGameId < VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(_previousGameId != VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(_previousGameId <= userGameId[msg.sender])",
            "VeriSol.Ensures(_previousGameId < userGameId[msg.sender])",
            "VeriSol.Ensures(_previousGameId != userGameId[msg.sender])",
            "VeriSol.Ensures(VeriSol.Old(userGameId[msg.sender]) <= gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(userGameId[msg.sender]) < gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(userGameId[msg.sender]) != gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(userGameId[msg.sender]) <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(userGameId[msg.sender]) < VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(userGameId[msg.sender]) != VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(userGameId[msg.sender]) <= userGameId[msg.sender])",
            "VeriSol.Ensures(VeriSol.Old(userGameId[msg.sender]) < userGameId[msg.sender])",
            "VeriSol.Ensures(VeriSol.Old(userGameId[msg.sender]) != userGameId[msg.sender])",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) == maxStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) >= maxStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) <= maxStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) == minStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) >= minStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) <= minStake)",
            "VeriSol.Ensures(timePaused == VeriSol.Old(timePaused))",
            "VeriSol.Ensures(timePaused >= VeriSol.Old(timePaused))",
            "VeriSol.Ensures(timePaused <= VeriSol.Old(timePaused))",
            "VeriSol.Ensures(activated == VeriSol.Old(activated))",
            "VeriSol.Ensures(maxStake <= msg.value)",
            "VeriSol.Ensures(maxStake < msg.value)",
            "VeriSol.Ensures(maxStake != msg.value)",
            "VeriSol.Ensures(maxStake == minStake)",
            "VeriSol.Ensures(maxStake >= minStake)",
            "VeriSol.Ensures(maxStake <= minStake)",
            "VeriSol.Ensures(maxStake == VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(maxStake >= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(maxStake <= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(VeriSol.Old(address(pendingOwner)) == pendingOwner)",
            "VeriSol.Ensures(gameIdCntr != VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(gameIdCntr == userGameId[msg.sender] + 1)",
            "VeriSol.Ensures(gameIdCntr >= userGameId[msg.sender])",
            "VeriSol.Ensures(gameIdCntr > userGameId[msg.sender])",
            "VeriSol.Ensures(gameIdCntr != userGameId[msg.sender])",
            "VeriSol.Ensures(serverAddress == VeriSol.Old(address(serverAddress)))",
            "VeriSol.Ensures(VeriSol.SumMapping(userGameId) >= userGameId[msg.sender])",
            "VeriSol.Ensures(VeriSol.Old(houseStake) == houseStake)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) >= houseStake)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) <= houseStake)",
            "VeriSol.Ensures(msg.value >= minStake)",
            "VeriSol.Ensures(msg.value > minStake)",
            "VeriSol.Ensures(msg.value != minStake)",
            "VeriSol.Ensures(minStake == VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(minStake >= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(minStake <= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(newConflictRes == VeriSol.Old(address(newConflictRes)))",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) == houseProfit)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) >= houseProfit)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) <= houseProfit)",
            "VeriSol.Ensures(owner == VeriSol.Old(address(owner)))"
        ],
        "falsified_preconditions": [
            "VeriSol.Requires(VeriSol.Old(activeGames) == 0)",
            "VeriSol.Requires(VeriSol.Old(activeGames) > 0)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) > 0)",
            "VeriSol.Requires(_previousGameId == 0)",
            "VeriSol.Requires(_previousGameId > 0)",
            "VeriSol.Requires(VeriSol.Old(userGameId[msg.sender]) == 0)",
            "VeriSol.Requires(VeriSol.Old(userGameId[msg.sender]) > 0)",
            "VeriSol.Requires(VeriSol.Old(houseProfit) > 0)",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) <= VeriSol.Old(VeriSol.SumMapping(userGameId)))",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) < VeriSol.Old(VeriSol.SumMapping(userGameId)))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) > _previousGameId)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) != _previousGameId)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) > VeriSol.Old(userGameId[msg.sender]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) != VeriSol.Old(userGameId[msg.sender]))"
        ],
        "falsified_postconditions": [
            "VeriSol.Ensures(houseProfit > 0)",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) < VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) != VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) >= gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) > gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) >= userGameId[msg.sender])",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) > userGameId[msg.sender])",
            "VeriSol.Ensures(gameIdCntr <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(gameIdCntr < VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.SumMapping(userGameId) > userGameId[msg.sender])",
            "VeriSol.Ensures(VeriSol.SumMapping(userGameId) != userGameId[msg.sender])"
        ]
    },
    {
        "func": "createGame(_userEndHash,_previousGameId,_createBefore,_serverEndHash,_serverSig)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [
            "VeriSol.Requires(VeriSol.Old(DOMAIN_SEPERATOR) == '')",
            "VeriSol.Requires(VeriSol.Old(address(houseAddress)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) > 0)",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) == 4047)",
            "VeriSol.Requires(VeriSol.Old(activeGames) > 0)",
            "VeriSol.Requires(VeriSol.Old(activeGames) == 3)",
            "VeriSol.Requires(VeriSol.Old(paused) == false)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) > 0)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) == 64616)",
            "VeriSol.Requires(_serverSig != '')",
            "VeriSol.Requires(_previousGameId == 0)",
            "VeriSol.Requires(VeriSol.Old(updateTime) == 0)",
            "VeriSol.Requires(_serverEndHash != '')",
            "VeriSol.Requires(VeriSol.Old(userGameId[msg.sender]) > 0)",
            "VeriSol.Requires(VeriSol.Old(userGameId[msg.sender]) == 4044)",
            "VeriSol.Requires(VeriSol.Old(uint256(minStake)) == 0)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(pendingOwner)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(profitTransferTimeSpan) == 0)",
            "VeriSol.Requires(msg.sender != address(0))",
            "VeriSol.Requires(VeriSol.Old(houseStake) > 0)",
            "VeriSol.Requires(VeriSol.Old(houseStake) == 49822131700000000000)",
            "VeriSol.Requires(msg.value > 0)",
            "VeriSol.Requires(msg.value == 10000000000000000)",
            "VeriSol.Requires(VeriSol.Old(lastProfitTransferTimestamp) == 0)",
            "VeriSol.Requires(_userEndHash != '')",
            "VeriSol.Requires(VeriSol.Old(activated) == true)",
            "VeriSol.Requires(VeriSol.Old(address(newConflictRes)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(address(serverAddress)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(uint256(maxStake)) == 0)",
            "VeriSol.Requires(_createBefore > 0)",
            "VeriSol.Requires(_createBefore == 1549831586)",
            "VeriSol.Requires(VeriSol.Old(houseProfit) > 0)",
            "VeriSol.Requires(VeriSol.Old(houseProfit) == 115792089237316195423570985008687907853269984665640564039457406139613129639936)",
            "VeriSol.Requires(VeriSol.Old(address(owner)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(timePaused) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(conflictRes)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) <= VeriSol.Old(VeriSol.SumMapping(userGameId)))",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) < VeriSol.Old(VeriSol.SumMapping(userGameId)))",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) != VeriSol.Old(VeriSol.SumMapping(userGameId)))",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) >= _previousGameId)",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) > _previousGameId)",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) != _previousGameId)",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) >= VeriSol.Old(userGameId[msg.sender]))",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) > VeriSol.Old(userGameId[msg.sender]))",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) != VeriSol.Old(userGameId[msg.sender]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) >= _previousGameId)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) > _previousGameId)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) != _previousGameId)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) >= VeriSol.Old(userGameId[msg.sender]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) > VeriSol.Old(userGameId[msg.sender]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) != VeriSol.Old(userGameId[msg.sender]))",
            "VeriSol.Requires(_previousGameId <= VeriSol.Old(userGameId[msg.sender]))",
            "VeriSol.Requires(_previousGameId < VeriSol.Old(userGameId[msg.sender]))",
            "VeriSol.Requires(_previousGameId != VeriSol.Old(userGameId[msg.sender]))",
            "VeriSol.Requires(VeriSol.Old(uint256(minStake)) <= msg.value)",
            "VeriSol.Requires(VeriSol.Old(uint256(minStake)) < msg.value)",
            "VeriSol.Requires(VeriSol.Old(uint256(minStake)) != msg.value)",
            "VeriSol.Requires(VeriSol.Old(uint256(minStake)) == VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Requires(VeriSol.Old(uint256(minStake)) >= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Requires(VeriSol.Old(uint256(minStake)) <= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Requires(msg.value >= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Requires(msg.value > VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Requires(msg.value != VeriSol.Old(uint256(maxStake)))"
        ],
        "postconditions": [
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == 0)",
            "VeriSol.Ensures(lastProfitTransferTimestamp == 0)",
            "VeriSol.Ensures(profitTransferTimeSpan == 0)",
            "VeriSol.Ensures(conflictRes == address(0))",
            "VeriSol.Ensures(updateTime == 0)",
            "VeriSol.Ensures(houseAddress == address(0))",
            "VeriSol.Ensures(timePaused == 0)",
            "VeriSol.Ensures(activated == true)",
            "VeriSol.Ensures(maxStake == 0)",
            "VeriSol.Ensures(gameIdCntr > 0)",
            "VeriSol.Ensures(gameIdCntr == 4047)",
            "VeriSol.Ensures(serverAddress == address(0))",
            "VeriSol.Ensures(VeriSol.SumMapping(userGameId) > 0)",
            "VeriSol.Ensures(VeriSol.SumMapping(userGameId) == 64616)",
            "VeriSol.Ensures(paused == false)",
            "VeriSol.Ensures(minStake == 0)",
            "VeriSol.Ensures(activeGames > 0)",
            "VeriSol.Ensures(activeGames == 3)",
            "VeriSol.Ensures(newConflictRes == address(0))",
            "VeriSol.Ensures(userGameId[msg.sender] > 0)",
            "VeriSol.Ensures(userGameId[msg.sender] == 4044)",
            "VeriSol.Ensures(gameIdGame[...].userSeed != '')",
            "VeriSol.Ensures(houseStake > 0)",
            "VeriSol.Ensures(houseStake == 49822131700000000000)",
            "VeriSol.Ensures(DOMAIN_SEPERATOR=='')",
            "VeriSol.Ensures(pendingOwner == address(0))",
            "VeriSol.Ensures(owner == address(0))",
            "VeriSol.Ensures(houseProfit > 0)",
            "VeriSol.Ensures(houseProfit == 115792089237316195423570985008687907853269984665640564039457406139613129639936)",
            "VeriSol.Ensures(gameIdGame[...].serverSeed != '')",
            "VeriSol.Ensures(VeriSol.Old(address(houseAddress)) == houseAddress)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) >= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(lastProfitTransferTimestamp == VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(lastProfitTransferTimestamp >= VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(lastProfitTransferTimestamp <= VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) == gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) >= gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) <= gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) < VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) != VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) >= userGameId[msg.sender])",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) > userGameId[msg.sender])",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) != userGameId[msg.sender])",
            "VeriSol.Ensures(VeriSol.Old(activeGames) == activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) >= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) <= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(paused) == paused)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) >= gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) > gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) != gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) == VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) >= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) >= userGameId[msg.sender])",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) > userGameId[msg.sender])",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) != userGameId[msg.sender])",
            "VeriSol.Ensures(profitTransferTimeSpan == VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(profitTransferTimeSpan >= VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(profitTransferTimeSpan <= VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(conflictRes == VeriSol.Old(address(conflictRes)))",
            "VeriSol.Ensures(updateTime == VeriSol.Old(updateTime))",
            "VeriSol.Ensures(updateTime >= VeriSol.Old(updateTime))",
            "VeriSol.Ensures(updateTime <= VeriSol.Old(updateTime))",
            "VeriSol.Ensures(_previousGameId <= gameIdCntr)",
            "VeriSol.Ensures(_previousGameId < gameIdCntr)",
            "VeriSol.Ensures(_previousGameId != gameIdCntr)",
            "VeriSol.Ensures(_previousGameId <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(_previousGameId < VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(_previousGameId != VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(_previousGameId <= userGameId[msg.sender])",
            "VeriSol.Ensures(_previousGameId < userGameId[msg.sender])",
            "VeriSol.Ensures(_previousGameId != userGameId[msg.sender])",
            "VeriSol.Ensures(VeriSol.Old(userGameId[msg.sender]) <= gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(userGameId[msg.sender]) < gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(userGameId[msg.sender]) != gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(userGameId[msg.sender]) <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(userGameId[msg.sender]) < VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(userGameId[msg.sender]) != VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(userGameId[msg.sender]) == userGameId[msg.sender])",
            "VeriSol.Ensures(VeriSol.Old(userGameId[msg.sender]) >= userGameId[msg.sender])",
            "VeriSol.Ensures(VeriSol.Old(userGameId[msg.sender]) <= userGameId[msg.sender])",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) == maxStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) >= maxStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) <= maxStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) == minStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) >= minStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) <= minStake)",
            "VeriSol.Ensures(timePaused == VeriSol.Old(timePaused))",
            "VeriSol.Ensures(timePaused >= VeriSol.Old(timePaused))",
            "VeriSol.Ensures(timePaused <= VeriSol.Old(timePaused))",
            "VeriSol.Ensures(activated == VeriSol.Old(activated))",
            "VeriSol.Ensures(maxStake <= msg.value)",
            "VeriSol.Ensures(maxStake < msg.value)",
            "VeriSol.Ensures(maxStake != msg.value)",
            "VeriSol.Ensures(maxStake == minStake)",
            "VeriSol.Ensures(maxStake >= minStake)",
            "VeriSol.Ensures(maxStake <= minStake)",
            "VeriSol.Ensures(maxStake == VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(maxStake >= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(maxStake <= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(VeriSol.Old(address(pendingOwner)) == pendingOwner)",
            "VeriSol.Ensures(gameIdCntr <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(gameIdCntr < VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(gameIdCntr != VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(gameIdCntr >= userGameId[msg.sender])",
            "VeriSol.Ensures(gameIdCntr > userGameId[msg.sender])",
            "VeriSol.Ensures(gameIdCntr != userGameId[msg.sender])",
            "VeriSol.Ensures(serverAddress == VeriSol.Old(address(serverAddress)))",
            "VeriSol.Ensures(VeriSol.SumMapping(userGameId) >= userGameId[msg.sender])",
            "VeriSol.Ensures(VeriSol.SumMapping(userGameId) > userGameId[msg.sender])",
            "VeriSol.Ensures(VeriSol.SumMapping(userGameId) != userGameId[msg.sender])",
            "VeriSol.Ensures(VeriSol.Old(houseStake) == houseStake)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) >= houseStake)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) <= houseStake)",
            "VeriSol.Ensures(msg.value >= minStake)",
            "VeriSol.Ensures(msg.value > minStake)",
            "VeriSol.Ensures(msg.value != minStake)",
            "VeriSol.Ensures(minStake == VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(minStake >= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(minStake <= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(newConflictRes == VeriSol.Old(address(newConflictRes)))",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) == houseProfit)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) >= houseProfit)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) <= houseProfit)",
            "VeriSol.Ensures(owner == VeriSol.Old(address(owner)))"
        ],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "userForceGameEnd(_gameId)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "userForceGameEnd(_gameId)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "updateConflictResolution(_newConflictResAddress)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "updateConflictResolution(_newConflictResAddress)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "serverForceGameEnd(_userAddress,_gameId)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [
            "VeriSol.Requires(VeriSol.Old(DOMAIN_SEPERATOR) == '')",
            "VeriSol.Requires(VeriSol.Old(address(houseAddress)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) > 0)",
            "VeriSol.Requires(VeriSol.Old(activeGames) > 0)",
            "VeriSol.Requires(VeriSol.Old(paused) == false)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) > 0)",
            "VeriSol.Requires(VeriSol.Old(userGameId[_userAddress]) > 0)",
            "VeriSol.Requires(VeriSol.Old(updateTime) == 0)",
            "VeriSol.Requires(_userAddress != address(0))",
            "VeriSol.Requires(VeriSol.Old(uint256(minStake)) == 0)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(pendingOwner)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(profitTransferTimeSpan) == 0)",
            "VeriSol.Requires(msg.sender != address(0))",
            "VeriSol.Requires(_gameId > 0)",
            "VeriSol.Requires(VeriSol.Old(houseStake) > 0)",
            "VeriSol.Requires(msg.value == 0)",
            "VeriSol.Requires(VeriSol.Old(lastProfitTransferTimestamp) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(newConflictRes)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(activated) == true)",
            "VeriSol.Requires(VeriSol.Old(address(serverAddress)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(uint256(maxStake)) == 0)",
            "VeriSol.Requires(VeriSol.Old(pendingReturns[_userAddress]) == 0)",
            "VeriSol.Requires(VeriSol.Old(houseProfit) > 0)",
            "VeriSol.Requires(VeriSol.Old(address(owner)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(timePaused) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(conflictRes)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(activeGames) >= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Requires(VeriSol.Old(activeGames) > VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Requires(VeriSol.Old(activeGames) != VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Requires(VeriSol.Old(activeGames) <= VeriSol.Old(houseStake))",
            "VeriSol.Requires(VeriSol.Old(activeGames) < VeriSol.Old(houseStake))",
            "VeriSol.Requires(VeriSol.Old(activeGames) != VeriSol.Old(houseStake))",
            "VeriSol.Requires(VeriSol.Old(activeGames) >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(activeGames) > VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(activeGames) != VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) >= VeriSol.Old(userGameId[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) > VeriSol.Old(userGameId[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) != VeriSol.Old(userGameId[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) >= _gameId)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) > _gameId)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) != _gameId)",
            "VeriSol.Requires(VeriSol.Old(userGameId[_userAddress]) == _gameId)",
            "VeriSol.Requires(VeriSol.Old(userGameId[_userAddress]) >= _gameId)",
            "VeriSol.Requires(VeriSol.Old(userGameId[_userAddress]) <= _gameId)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) <= VeriSol.Old(houseStake))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) < VeriSol.Old(houseStake))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) != VeriSol.Old(houseStake))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) == VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) <= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(msg.sender != VeriSol.Old(address(serverAddress)))",
            "VeriSol.Requires(VeriSol.Old(houseStake) >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(houseStake) > VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Requires(VeriSol.Old(houseStake) != VeriSol.Old(pendingReturns[_userAddress]))"
        ],
        "postconditions": [
            "VeriSol.Ensures(pendingReturns[_userAddress] == 0)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == 0)",
            "VeriSol.Ensures(lastProfitTransferTimestamp == 0)",
            "VeriSol.Ensures(userGameId[_userAddress] > 0)",
            "VeriSol.Ensures(profitTransferTimeSpan == 0)",
            "VeriSol.Ensures(conflictRes == address(0))",
            "VeriSol.Ensures(updateTime == 0)",
            "VeriSol.Ensures(houseAddress == address(0))",
            "VeriSol.Ensures(timePaused == 0)",
            "VeriSol.Ensures(activated == true)",
            "VeriSol.Ensures(maxStake == 0)",
            "VeriSol.Ensures(gameIdCntr > 0)",
            "VeriSol.Ensures(serverAddress == address(0))",
            "VeriSol.Ensures(VeriSol.SumMapping(userGameId) > 0)",
            "VeriSol.Ensures(paused == false)",
            "VeriSol.Ensures(minStake == 0)",
            "VeriSol.Ensures(activeGames > 0)",
            "VeriSol.Ensures(newConflictRes == address(0))",
            "VeriSol.Ensures(gameIdGame[...].userSeed != '')",
            "VeriSol.Ensures(houseStake > 0)",
            "VeriSol.Ensures(DOMAIN_SEPERATOR=='')",
            "VeriSol.Ensures(pendingOwner == address(0))",
            "VeriSol.Ensures(owner == address(0))",
            "VeriSol.Ensures(houseProfit > 0)",
            "VeriSol.Ensures(gameIdGame[...].serverSeed != '')",
            "VeriSol.Ensures(pendingReturns[_userAddress] == VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(pendingReturns[_userAddress] >= VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= VeriSol.SumMapping(pendingReturns))",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= VeriSol.Old(activeGames))",
            "VeriSol.Ensures(pendingReturns[_userAddress] < VeriSol.Old(activeGames))",
            "VeriSol.Ensures(pendingReturns[_userAddress] != VeriSol.Old(activeGames))",
            "VeriSol.Ensures(pendingReturns[_userAddress] == VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(pendingReturns[_userAddress] >= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= VeriSol.Old(houseStake))",
            "VeriSol.Ensures(pendingReturns[_userAddress] < VeriSol.Old(houseStake))",
            "VeriSol.Ensures(pendingReturns[_userAddress] != VeriSol.Old(houseStake))",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= activeGames)",
            "VeriSol.Ensures(pendingReturns[_userAddress] < activeGames)",
            "VeriSol.Ensures(pendingReturns[_userAddress] != activeGames)",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= houseStake)",
            "VeriSol.Ensures(pendingReturns[_userAddress] < houseStake)",
            "VeriSol.Ensures(pendingReturns[_userAddress] != houseStake)",
            "VeriSol.Ensures(pendingReturns[_userAddress] == VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(pendingReturns[_userAddress] >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(pendingReturns[_userAddress] <= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(VeriSol.Old(address(houseAddress)) == houseAddress)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= VeriSol.Old(activeGames))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) < VeriSol.Old(activeGames))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) != VeriSol.Old(activeGames))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) >= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= VeriSol.Old(houseStake))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) < VeriSol.Old(houseStake))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) != VeriSol.Old(houseStake))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= activeGames)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) < activeGames)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) != activeGames)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= houseStake)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) < houseStake)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) != houseStake)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(lastProfitTransferTimestamp == VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(lastProfitTransferTimestamp >= VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(lastProfitTransferTimestamp <= VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) == gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) >= gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) <= gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) == activeGames + 1)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) >= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) > activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) != activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) <= houseStake)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) < houseStake)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) != houseStake)",
            "VeriSol.Ensures(userGameId[_userAddress] <= VeriSol.Old(VeriSol.SumMapping(userGameId)))",
            "VeriSol.Ensures(userGameId[_userAddress] < VeriSol.Old(VeriSol.SumMapping(userGameId)))",
            "VeriSol.Ensures(userGameId[_userAddress] != VeriSol.Old(VeriSol.SumMapping(userGameId)))",
            "VeriSol.Ensures(userGameId[_userAddress] == VeriSol.Old(userGameId[_userAddress]))",
            "VeriSol.Ensures(userGameId[_userAddress] >= VeriSol.Old(userGameId[_userAddress]))",
            "VeriSol.Ensures(userGameId[_userAddress] <= VeriSol.Old(userGameId[_userAddress]))",
            "VeriSol.Ensures(userGameId[_userAddress] == _gameId)",
            "VeriSol.Ensures(userGameId[_userAddress] >= _gameId)",
            "VeriSol.Ensures(userGameId[_userAddress] <= _gameId)",
            "VeriSol.Ensures(userGameId[_userAddress] <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(userGameId[_userAddress] < VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(userGameId[_userAddress] != VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(paused) == paused)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) == VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) >= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(profitTransferTimeSpan == VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(profitTransferTimeSpan >= VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(profitTransferTimeSpan <= VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(conflictRes == VeriSol.Old(address(conflictRes)))",
            "VeriSol.Ensures(VeriSol.Old(userGameId[_userAddress]) <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(userGameId[_userAddress]) < VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(userGameId[_userAddress]) != VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(updateTime == VeriSol.Old(updateTime))",
            "VeriSol.Ensures(updateTime >= VeriSol.Old(updateTime))",
            "VeriSol.Ensures(updateTime <= VeriSol.Old(updateTime))",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) == minStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) >= minStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) <= minStake)",
            "VeriSol.Ensures(timePaused == VeriSol.Old(timePaused))",
            "VeriSol.Ensures(timePaused >= VeriSol.Old(timePaused))",
            "VeriSol.Ensures(timePaused <= VeriSol.Old(timePaused))",
            "VeriSol.Ensures(activated == VeriSol.Old(activated))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) <= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) < activeGames)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) != activeGames)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) <= houseStake)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) < houseStake)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) != houseStake)",
            "VeriSol.Ensures(maxStake == VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(maxStake >= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(maxStake <= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(VeriSol.Old(address(pendingOwner)) == pendingOwner)",
            "VeriSol.Ensures(serverAddress != msg.sender)",
            "VeriSol.Ensures(serverAddress == VeriSol.Old(address(serverAddress)))",
            "VeriSol.Ensures(_gameId <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(_gameId < VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(_gameId != VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(houseStake) >= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) > activeGames)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) != activeGames)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) <= houseStake)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) < houseStake)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) != houseStake)",
            "VeriSol.Ensures(activeGames <= houseStake)",
            "VeriSol.Ensures(activeGames < houseStake)",
            "VeriSol.Ensures(activeGames != houseStake)",
            "VeriSol.Ensures(activeGames >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(activeGames > VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(activeGames != VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(newConflictRes == VeriSol.Old(address(newConflictRes)))",
            "VeriSol.Ensures(houseStake >= VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(houseStake > VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(houseStake != VeriSol.Old(pendingReturns[_userAddress]))",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) <= houseProfit)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) < houseProfit)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) != houseProfit)",
            "VeriSol.Ensures(owner == VeriSol.Old(address(owner)))"
        ],
        "falsified_preconditions": [],
        "falsified_postconditions": [
            "VeriSol.Ensures(pendingReturns[_userAddress] == activeGames - 1)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == activeGames - 1)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) == activeGames - 1)",
            "VeriSol.Ensures(activeGames == VeriSol.Old(pendingReturns[_userAddress]) + 1)"
        ]
    },
    {
        "func": "serverForceGameEnd(_userAddress,_gameId)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setStakeRequirements(_minStake,_maxStake)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setStakeRequirements(_minStake,_maxStake)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "userEndGame(_roundId,_balance,_serverHash,_userHash,_gameId,_contractAddress,_serverSig)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "userEndGame(_roundId,_balance,_serverHash,_userHash,_gameId,_contractAddress,_serverSig)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setHouseAddress(_houseAddress)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "setHouseAddress(_houseAddress)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "transferOwnership(_newOwner)",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "transferOwnership(_newOwner)",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "transferProfitToHouse()",
        "type": "PptType.EXIT",
        "executionType": "TxType.NORMAL",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": "transferProfitToHouse()",
        "type": "PptType.EXIT",
        "executionType": "TxType.REVERSION",
        "preconditions": [],
        "postconditions": [],
        "falsified_preconditions": [],
        "falsified_postconditions": []
    },
    {
        "func": null,
        "type": "PptType.CONTRACT",
        "executionType": "TxType.NORMAL",
        "preconditions": [
            "VeriSol.Requires(VeriSol.Old(DOMAIN_SEPERATOR) == '')",
            "VeriSol.Requires(VeriSol.Old(address(houseAddress)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) > 0)",
            "VeriSol.Requires(VeriSol.Old(updateTime) == 0)",
            "VeriSol.Requires(VeriSol.Old(uint256(minStake)) == 0)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(pendingOwner)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(profitTransferTimeSpan) == 0)",
            "VeriSol.Requires(VeriSol.Old(lastProfitTransferTimestamp) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(newConflictRes)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(address(serverAddress)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(uint256(maxStake)) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(owner)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(timePaused) == 0)",
            "VeriSol.Requires(VeriSol.Old(address(conflictRes)) == address(0))",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) != VeriSol.Old(VeriSol.SumMapping(userGameId)))",
            "VeriSol.Requires(VeriSol.Old(activeGames) >= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Requires(VeriSol.Old(activeGames) <= VeriSol.Old(houseStake))",
            "VeriSol.Requires(VeriSol.Old(uint256(minStake)) == VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Requires(VeriSol.Old(uint256(minStake)) >= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Requires(VeriSol.Old(uint256(minStake)) <= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) <= VeriSol.Old(houseStake))",
            "VeriSol.Requires(VeriSol.Old(address(pendingOwner)) == VeriSol.Old(address(owner)))",
            "VeriSol.Requires(VeriSol.Old(houseStake) >= VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Requires(VeriSol.Old(address(newConflictRes)) == VeriSol.Old(address(conflictRes)))"
        ],
        "postconditions": [
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == 0)",
            "VeriSol.Ensures(lastProfitTransferTimestamp == 0)",
            "VeriSol.Ensures(profitTransferTimeSpan == 0)",
            "VeriSol.Ensures(conflictRes == address(0))",
            "VeriSol.Ensures(updateTime == 0)",
            "VeriSol.Ensures(houseAddress == address(0))",
            "VeriSol.Ensures(timePaused == 0)",
            "VeriSol.Ensures(activated == true)",
            "VeriSol.Ensures(maxStake == 0)",
            "VeriSol.Ensures(gameIdCntr > 0)",
            "VeriSol.Ensures(serverAddress == address(0))",
            "VeriSol.Ensures(minStake == 0)",
            "VeriSol.Ensures(newConflictRes == address(0))",
            "VeriSol.Ensures(gameIdGame[...].userSeed != '')",
            "VeriSol.Ensures(DOMAIN_SEPERATOR=='')",
            "VeriSol.Ensures(pendingOwner == address(0))",
            "VeriSol.Ensures(owner == address(0))",
            "VeriSol.Ensures(gameIdGame[...].serverSeed != '')",
            "VeriSol.Ensures(VeriSol.Old(address(houseAddress)) == houseAddress)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= VeriSol.Old(activeGames))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) >= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= VeriSol.Old(houseStake))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= activeGames)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) <= houseStake)",
            "VeriSol.Ensures(lastProfitTransferTimestamp <= VeriSol.Old(houseStake))",
            "VeriSol.Ensures(lastProfitTransferTimestamp == VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(lastProfitTransferTimestamp >= VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(lastProfitTransferTimestamp <= VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Ensures(lastProfitTransferTimestamp <= houseStake)",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) <= gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) <= houseStake)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) != gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(profitTransferTimeSpan == VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(profitTransferTimeSpan >= VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(profitTransferTimeSpan <= VeriSol.Old(profitTransferTimeSpan))",
            "VeriSol.Ensures(conflictRes == newConflictRes)",
            "VeriSol.Ensures(conflictRes == VeriSol.Old(address(newConflictRes)))",
            "VeriSol.Ensures(conflictRes == VeriSol.Old(address(conflictRes)))",
            "VeriSol.Ensures(updateTime == VeriSol.Old(updateTime))",
            "VeriSol.Ensures(updateTime >= VeriSol.Old(updateTime))",
            "VeriSol.Ensures(updateTime <= VeriSol.Old(updateTime))",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) == maxStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) >= maxStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) <= maxStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) == minStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) >= minStake)",
            "VeriSol.Ensures(VeriSol.Old(uint256(minStake)) <= minStake)",
            "VeriSol.Ensures(timePaused == VeriSol.Old(timePaused))",
            "VeriSol.Ensures(timePaused >= VeriSol.Old(timePaused))",
            "VeriSol.Ensures(timePaused <= VeriSol.Old(timePaused))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) <= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) <= houseStake)",
            "VeriSol.Ensures(maxStake == minStake)",
            "VeriSol.Ensures(maxStake >= minStake)",
            "VeriSol.Ensures(maxStake <= minStake)",
            "VeriSol.Ensures(maxStake == VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(maxStake >= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(maxStake <= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(VeriSol.Old(address(pendingOwner)) == pendingOwner)",
            "VeriSol.Ensures(VeriSol.Old(address(pendingOwner)) == owner)",
            "VeriSol.Ensures(gameIdCntr != VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(serverAddress == VeriSol.Old(address(serverAddress)))",
            "VeriSol.Ensures(VeriSol.Old(houseStake) >= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(lastProfitTransferTimestamp) <= houseStake)",
            "VeriSol.Ensures(minStake == VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(minStake >= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(minStake <= VeriSol.Old(uint256(maxStake)))",
            "VeriSol.Ensures(activeGames <= houseStake)",
            "VeriSol.Ensures(newConflictRes == VeriSol.Old(address(newConflictRes)))",
            "VeriSol.Ensures(newConflictRes == VeriSol.Old(address(conflictRes)))",
            "VeriSol.Ensures(pendingOwner == owner)",
            "VeriSol.Ensures(pendingOwner == VeriSol.Old(address(owner)))",
            "VeriSol.Ensures(owner == VeriSol.Old(address(owner)))"
        ],
        "falsified_preconditions": [
            "VeriSol.Requires(VeriSol.Old(activeGames) == 0)",
            "VeriSol.Requires(VeriSol.Old(activeGames) > 0)",
            "VeriSol.Requires(VeriSol.Old(paused) == true)",
            "VeriSol.Requires(VeriSol.Old(paused) == false)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) == 0)",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(userGameId)) > 0)",
            "VeriSol.Requires(VeriSol.Old(houseStake) > 0)",
            "VeriSol.Requires(VeriSol.Old(activated) == true)",
            "VeriSol.Requires(VeriSol.Old(houseProfit) == 0)",
            "VeriSol.Requires(VeriSol.Old(houseProfit) > 0)",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) >= VeriSol.Old(VeriSol.SumMapping(userGameId)))",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) > VeriSol.Old(VeriSol.SumMapping(userGameId)))",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) <= VeriSol.Old(VeriSol.SumMapping(userGameId)))",
            "VeriSol.Requires(VeriSol.Old(gameIdCntr) < VeriSol.Old(VeriSol.SumMapping(userGameId)))",
            "VeriSol.Requires(VeriSol.Old(activeGames) == VeriSol.Old(VeriSol.SumMapping(pendingReturns)) + 1)",
            "VeriSol.Requires(VeriSol.Old(activeGames) == VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Requires(VeriSol.Old(activeGames) > VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Requires(VeriSol.Old(activeGames) <= VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Requires(VeriSol.Old(activeGames) != VeriSol.Old(VeriSol.SumMapping(pendingReturns)))",
            "VeriSol.Requires(VeriSol.Old(activeGames) < VeriSol.Old(houseStake))",
            "VeriSol.Requires(VeriSol.Old(activeGames) != VeriSol.Old(houseStake))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) < VeriSol.Old(houseStake))",
            "VeriSol.Requires(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) != VeriSol.Old(houseStake))",
            "VeriSol.Requires(VeriSol.Old(houseStake) > VeriSol.Old(lastProfitTransferTimestamp))",
            "VeriSol.Requires(VeriSol.Old(houseStake) != VeriSol.Old(lastProfitTransferTimestamp))"
        ],
        "falsified_postconditions": [
            "VeriSol.Ensures(VeriSol.SumMapping(userGameId) == 0)",
            "VeriSol.Ensures(VeriSol.SumMapping(userGameId) > 0)",
            "VeriSol.Ensures(paused == true)",
            "VeriSol.Ensures(paused == false)",
            "VeriSol.Ensures(activeGames == 0)",
            "VeriSol.Ensures(activeGames > 0)",
            "VeriSol.Ensures(houseStake > 0)",
            "VeriSol.Ensures(houseProfit == 0)",
            "VeriSol.Ensures(houseProfit > 0)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == VeriSol.Old(activeGames) - 1)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == VeriSol.Old(activeGames))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) >= VeriSol.Old(activeGames))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) < VeriSol.Old(activeGames))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) != VeriSol.Old(activeGames))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) < VeriSol.Old(houseStake))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) != VeriSol.Old(houseStake))",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == activeGames - 1)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) == activeGames)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) >= activeGames)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) < activeGames)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) != activeGames)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) < houseStake)",
            "VeriSol.Ensures(VeriSol.SumMapping(pendingReturns) != houseStake)",
            "VeriSol.Ensures(lastProfitTransferTimestamp < VeriSol.Old(houseStake))",
            "VeriSol.Ensures(lastProfitTransferTimestamp != VeriSol.Old(houseStake))",
            "VeriSol.Ensures(lastProfitTransferTimestamp < houseStake)",
            "VeriSol.Ensures(lastProfitTransferTimestamp != houseStake)",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) == gameIdCntr - 1)",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) == gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) >= gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) < gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) != gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) >= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) > VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) < VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(gameIdCntr) != VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(activeGames) == activeGames + 1)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) == activeGames - 1)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) == activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) >= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) > activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) <= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) < activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) != activeGames)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) < houseStake)",
            "VeriSol.Ensures(VeriSol.Old(activeGames) != houseStake)",
            "VeriSol.Ensures(VeriSol.Old(paused) == paused)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) >= gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) > gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) <= gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) < gameIdCntr)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) == VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) >= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) < VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(userGameId)) != VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(activated == VeriSol.Old(activated))",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) == activeGames - 1)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) == activeGames)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) >= activeGames)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) < activeGames)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) != activeGames)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) < houseStake)",
            "VeriSol.Ensures(VeriSol.Old(VeriSol.SumMapping(pendingReturns)) != houseStake)",
            "VeriSol.Ensures(gameIdCntr >= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(gameIdCntr > VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(gameIdCntr <= VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(gameIdCntr < VeriSol.SumMapping(userGameId))",
            "VeriSol.Ensures(VeriSol.Old(houseStake) > activeGames)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) != activeGames)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) == houseStake)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) >= houseStake)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) > houseStake)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) <= houseStake)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) < houseStake)",
            "VeriSol.Ensures(VeriSol.Old(houseStake) != houseStake)",
            "VeriSol.Ensures(VeriSol.Old(lastProfitTransferTimestamp) < houseStake)",
            "VeriSol.Ensures(VeriSol.Old(lastProfitTransferTimestamp) != houseStake)",
            "VeriSol.Ensures(activeGames < houseStake)",
            "VeriSol.Ensures(activeGames != houseStake)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) == houseProfit)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) >= houseProfit)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) > houseProfit)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) <= houseProfit)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) < houseProfit)",
            "VeriSol.Ensures(VeriSol.Old(houseProfit) != houseProfit)"
        ]
    }
]